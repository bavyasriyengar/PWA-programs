server.js
var express = require('express');
var bodyParser = require('body-parser');
var app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended:true}));
app.use(express.static('public'));
app.use('/images', express.static(__dirname + '/public/images'));
app.get('/',function(req,resp){
resp.sendFile(__dirname+"/"+"public/index.html")
});
app.post('/login',function(req,resp)
{
if(req.body.username=='admin'&& req.body.password=='admin123')
{
console.log('Logged in successfully');
resp.sendFile(__dirname+"/"+"public/success.html")
}
else
{
console.log('invalid credentials');
resp.sendFile(__dirname+"/"+"public/error.html")
}
});
app.listen(5012,function(){
console.log('Listening at port 5012');
});
index.html
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<title>GitHub User Data</title>
<link rel="manifest" href="manifest.json">
<link rel="shortcut icon" href="http://example.com/favicon.ico" />
<style>
.button {
border: none;
color: white;
padding: 15px 32px;
text-align: center;
font-family:"Comic Sans MS";
display: inline-block;
font-size: 16px;
margin: 4px 2px;
cursor: pointer;
background-color:#008CBA;
width: 30%;
}
h1{margin-top: 50px;
}
input[type=text],[type=password] {
width: 30%;
padding: 12px 20px;
margin: 8px 0;
display: inline-block;
border: 1px solid #ccc;
border-radius: 4px;
box-sizing: border-box;
}
</style>
</head>
<body>
<div style="text-align: center;">
<h1><img src="icons256.png" alt="icon" width="50px"/> Fetching Github
Information</h1><br><br>
<h3>Enter username</h3>
<input type="text" id="uname" required/><br>
<button id="fetch_user" class="button">Submit</button>
<div id="profilecard" style="text-align: center;">
<table>
<tr>
<td><img id="gitImg" style="width:200px; margin-top: 10px;" ></td>
<td><h2 id="gitName"></h2>
<h2 id="gitBio"></h2>
<h2 class="center-align" id="gitRepo"></h2>
<h2 id="gitLoc"></h2></td>
</tr>
</table>
</div>
</div>
<script>
if('serviceWorker' in navigator){
window.addEventListener('load',()=>{
navigator.serviceWorker.register('serviceworker.js')
.then(registration =>{
console.log('service worker is registered',registration);
})
.catch(err =>{
console.log('Registration failed',err);
})
})
}
</script><script src="main.js"></script>
</body>
</html>
offline.html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<title>PWA Tutorial</title>
</head>
<body>
<h1>Offline Page</h1>
</body>
</html>
404.html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<title>PWA Tutorial</title>
</head>
<body>
<h1>404 Page</h1>
</body>
</html>
main.js
document.getElementById("fetch_user").addEventListener("click", fetchGitData);
function fetchGitData(){
let uid = document.getElementById('uname').value;
fetch('https://api.github.com/users/' + uid)
.then((response) => {
return response.json();
}).then((data) => {
document.getElementById('profilecard').style.visibility = "visible";
document.getElementById('gitName').innerHTML = data.name;
document.getElementById('gitBio').innerHTML = data.bio;
document.getElementById('gitLoc').innerHTML = data.location;
document.getElementById('gitImg').src = data.avatar_url;
})
.catch((err) => {
console.log('error ', err);
});
fetch('https://api.github.com/users/' + uid +'/repos')
.then((response) => {
return response.json();
})
.then((data) => {
console.log(data);
document.getElementById('gitRepo').innerHTML = data.length + " Repos";
})
.catch((err) => {
console.log('error ', err);
});
}
serviceworker.js
const files = [
'/',
'index.html',
'404.html',
'offline.html',
'icons256.png',
'main.js',
];
const cacheName='first_cache';
self.addEventListener('install',event=>{
console.log('attempting to install service wroker and cache static assets')
event.waitUntil(
caches.open(cacheName)
.then(cache=>{
return cache.addAll(files)
})
);
});self .addEventListener('fetch',event=>{
console.log('fetch event for',event.request.url);
event.respondWith(
caches.match(event.request)
.then(response=>{
if(response){
console.log('found',event.request.url,'in cache');
}
//console.log('network request for',event.request.url);
return fetch(event.request)
.then(response=>{
if(response.status===404){
return caches.match('404.html');
}
return caches.open(cacheName)
.then(cache=>{
cache.put(event.request.url,response.clone());
return response
})
})
})
.catch(err=>{
console.error(err);
return caches.match('offline.html')
})
)
});
self.addEventListener('activate',event=>{
console.log('activating a new service worker');
const list=[cacheName];
event.waitUntil(
caches.keys()
.then(cacheNames=>{
return Promise.all(
cacheNames.map(cache_Name=>{
if(list.indexOf(cache_Name)===-1){
return caches.delete(cache_Name);
}
})
)
})
)})
