server.js
var express = require('express');
var bodyParser = require('body-parser');
var app = express();
app.use(bodyParser.json());app.use(bodyParser.urlencoded({extended:true}));
app.use(express.static('public'));
app.use('/images', express.static(__dirname + '/public/images'));
app.get('/',function(req,resp)
{
resp.sendFile(__dirname+"/"+"public/index.html")
});
app.listen(5678,function(){
console.log('Listening at port 5678');
});
404.html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<title>PWA Tutorial</title>
</head>
<body>
<h1>404 Page</h1>
</body>
</html>
index.html
<!DOCTYPE html>
<html>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<title>Login Page</title>
<style>
h1,p{
color:"#fff";
font-family:"Comic Sans MS";
}
body
{
background-image: url("background.jpg");
background-repeat: no-repeat;
-webkit-background-size: cover;
-moz-background-size: cover;-o-background-size: cover;
background-size: cover;
}
.button {
border: none;
color: white;
padding: 15px 32px;
text-align: center;
font-family:"Comic Sans MS";
display: inline-block;
font-size: 16px;
margin: 4px 2px;
cursor: pointer;
background-color:#000;
}
</style>
<link rel="manifest" href="manifest.json">
<body>
<div style="margin-top:150px; text-align: center; color: #ffffff;">
<h1>
Welcome 2k20</h1><br>
<p><i>"Beats succeeded because, as music lovers, we knew oscilloscopes don't buy headphones -
people do."</i></p><br>
<a href="next.html" class="button">Click here</a>
</div>
<script>
if('serviceWorker' in navigator){
window.addEventListener('load',()=>{
navigator.serviceWorker.register('sw.js')
.then(registration =>{
console.log('service worker is registered',registration);
})
.catch(err =>{
console.log('Registration failed',err);
})
})
}
</script>
</body>
</html>
next.html
<!DOCTYPE html>
<html><meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<title>Login Page</title>
<style>
h1,p{
color:"#fff";
font-family:"Comic Sans MS";
}
body
{
background-image: url("background.jpg");
background-repeat: no-repeat;
-webkit-background-size: cover;
-moz-background-size: cover;
-o-background-size: cover;
background-size: cover;
}
</style>
<link rel="manifest" href="manifest.json">
<body>
<div style="margin-top:150px; text-align: center; color: #ffffff;">
<h1>
Welcome 2k20</h1><br>
<p>Music is an art form, and cultural activity, whose medium is sound. General definitions of
music include common elements such as pitch which governs melody and harmony,
</p><p>rhythm and its associated concepts tempo, meter, and articulation, dynamics loudness and
softness, and the sonic qualities of timbre and texture which are sometimes termed the "color" of a
musical sound.</p>
</div>
</body>
</html>
offline.html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<title>PWA Tutorial</title>
</head>
<body>
<h1>Offline Page</h1></body>
</html>
Manifest.json
{
"name": "Login page",
"short_name": "Login",
"start_url": "/index.html",
"display": "standalone",
"theme_color": "#2196f3",
"background_color": "#2196f3",
"Scope": "/",
"icons": [
{
"src": "images/icons/icon-72x72.png",
"sizes": "72x72",
"type": "image/png"
},
{
"src": "images/icons/icon-96x96.png",
"sizes": "96x96",
"type": "image/png"
},
{
"src": "images/icons/icon-128x128.png",
"sizes": "128x128",
"type": "image/png"
},
{
"src": "images/icons/icon-144x144.png",
"sizes": "144x144",
"type": "image/png"
},
{
"src": "images/icons/icon-192x192.png",
"sizes": "192x192",
"type": "image/png"
},
{
"src": "images/icons/icon-384x384.png",
"sizes": "384x384",
"type": "image/png"
},
{"src": "images/icons/icon-512x512.png",
"sizes": "512x512",
"type": "image/png"
}
],
"splash_pages": null
}
sw,js
const files=[
'index.html',
'404.html',
'background.jpg',
'offline.html'
];
const cacheName='first_cache';
self.addEventListener('install',event=>{
console.log('attempting to install service wroker and cache static assets')
event.waitUntil(
caches.open(cacheName)
.then(cache=>{
return cache.addAll(files)
})
);
});
self .addEventListener('fetch',event=>{
console.log('fetch event for',event.request.url);
event.respondWith(
caches.match(event.request)
.then(response=>{
if(response){
console.log('found',event.request.url,'in cache');
}
//console.log('network request for',event.request.url);
return fetch(event.request)
.then(response=>{
if(response.status===404){
return caches.match('404.html');
}
return caches.open(cacheName)
.then(cache=>{cache.put(event.request.url,response.clone());
return response
})
})
})
.catch(err=>{
console.error(err);
return caches.match('offline.html')
})
)
});
self.addEventListener('activate',event=>{
console.log('activating a new service worker');
const list=[cacheName];
event.waitUntil(
caches.keys()
.then(cacheNames=>{
return Promise.all(
cacheNames.map(cache_Name=>{
if(list.indexOf(cache_Name)===-1){
return caches.delete(cache_Name);
}
})
)
})
)
})
